{"version":3,"sources":["redux/actions.js","components/Search/Search.jsx","containers/SearchPage/SearchPage.jsx","components/Pagination/Pagination.jsx","components/Table/Table.jsx","utils.js","components/Preloader/Preloader.jsx","containers/SearchResultPage/SearchResultPage.jsx","App.jsx","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["actionTypes","BASE_URL","initSearch","searchParam","dispatch","url","concat","name","page","forkUrls","type","payload","fetch","then","response","json","data","datum","catch","e","SearchComponent","props","inputHandler","inputValue","react_default","a","createElement","Form","inline","FormGroup","FormControl","className","placeholder","onChange","value","Button","onClick","searchRepo","redirect","length","SearchPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","searchInputText","target","redirectToResult","p","history","push","state","Grid","Jumbotron","Search","Component","connect","searchResult","appState","bindActionCreators","PaginationComponent","Pagination","bsSize","totalItems","redirectToPage","activePage","paginationPages","toFixed","paginationItems","_loop","i","Item","key","active","getPages","TableComponent","favorites","addToFavorites","Array","isArray","Table","striped","bordered","condensed","hover","map","item","id","owner","login","stargazers_count","href","html_url","bsStyle","find","k","Glyphicon","glyph","parseUrl","s","splitUrl","split","parseInt","Preloader","SearchResultPage","_this$props","location","repoName","search","window","localStorage","getItem","arr","setItem","JSON","stringify","parse","_this$props2","keys","constructor","status","_this$props3","Table_Table","Pagination_Pagination","components_Preloader_Preloader","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","hostname","match","initialState","reducer","combineReducers","arguments","undefined","action","objectSpread","forks_count","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a117189.chunk.js","sourcesContent":["\nexport const actionTypes = {\n  FETCH_GIT_REPO: 'FETCH_GIT_REPO',\n  FETCH_GIT_REPO_SUCCSESS: 'FETCH_GIT_REPO_SUCCSESS',\n  FETCH_GIT_REPO_FAIL: 'FETCH_GIT_REPO_FAIL',\n  FETCH_FORK_COUNT_SUCCESS: 'FETCH_FORK_COUNT_SUCCESS',\n  FETCH_FORK_COUNT_FAIL: 'FETCH_FORK_COUNT_SUCCESS',\n};\n\nconst BASE_URL = 'https://api.github.com/repos';\n\nexport const initSearch = searchParam => (dispatch) => {\n  const url = `${BASE_URL}/${searchParam.name}/forks?page=${searchParam.page}`;\n  const forkUrls = `${BASE_URL}/${searchParam.name}`;\n  dispatch({ type: actionTypes.FETCH_GIT_REPO, payload: null });\n  fetch(forkUrls)\n    .then(response => response.json())\n    .then((data) => {\n      fetch(url)\n        .then(response => response.json())\n        .then(datum => dispatch({ type: actionTypes.FETCH_GIT_REPO_SUCCSESS, payload: datum }))\n        .catch(e => dispatch({ type: actionTypes.FETCH_GIT_REPO_FAIL, payload: e }));\n      dispatch({ type: actionTypes.FETCH_FORK_COUNT_SUCCESS, payload: data });\n    })\n    .catch(e => dispatch({ type: actionTypes.FETCH_FORK_COUNT_FAIL, payload: e }));\n};\n","import React from 'react';\nimport {\n  Form, FormGroup, FormControl, Button,\n} from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst SearchComponent = (props) => {\n  const initSearch = () => {\n    const { searchRepo, redirect, inputValue } = props;\n    if (inputValue.length <= 0) { return; }\n    searchRepo({ name: inputValue });\n    redirect && redirect(inputValue);\n  };\n\n  const { inputHandler, inputValue } = props;\n  return (\n    <Form inline>\n      <FormGroup>\n        <FormControl\n          className=\"search-form-input\"\n          type=\"text\"\n          placeholder=\"Type repository name here...\"\n          onChange={inputHandler}\n          value={inputValue}\n        />\n      </FormGroup>\n      <Button onClick={initSearch}>Search</Button>\n    </Form>\n  );\n};\n\nSearchComponent.propTypes = {\n  searchRepo: PropTypes.func.isRequired,\n  redirect: PropTypes.func.isRequired,\n  inputHandler: PropTypes.func.isRequired,\n  inputValue: PropTypes.string.isRequired,\n};\nexport default SearchComponent;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Jumbotron, Grid } from 'react-bootstrap';\nimport { initSearch } from '../../redux/actions';\nimport SearchComponent from '../../components/Search/Search';\n\nclass SearchPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputText: '',\n    };\n  }\n\n  inputHandler = (e) => {\n    this.setState({ searchInputText: e.target.value });\n  }\n\n  redirectToResult = (p) => {\n    const { history } = this.props;\n    history.push(`/result?page=1repository=${p}`);\n  }\n\n  render() {\n    const { searchRepo } = this.props;\n    const { searchInputText } = this.state;\n    return (\n      <Grid>\n        <div>\n          <Jumbotron>\n            <h1>WebTouch test assign</h1>\n            <p>\n            This is a simple service for searching repositories forks on GitHub\n            </p>\n            <div>\n              <SearchComponent\n                redirect={this.redirectToResult}\n                searchRepo={searchRepo.initSearch}\n                inputHandler={this.inputHandler}\n                inputValue={searchInputText}\n              />\n            </div>\n          </Jumbotron>\n        </div>\n      </Grid>\n    );\n  }\n}\n\nSearchPage.propTypes = {\n  history: PropTypes.object,\n  searchRepo: PropTypes.object,\n};\n\nconst bindActions = dispatch => ({\n  dispatch,\n  searchRepo: bindActionCreators({ initSearch }, dispatch),\n});\n\nconst mapStateToProps = state => ({\n  searchResult: state.appState.searchResult,\n});\n\nexport default connect(mapStateToProps, bindActions)(SearchPage);\n","import React from 'react';\nimport { Pagination } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst PaginationComponent = (props) => {\n  const getPages = () => {\n    const { totalItems, redirectToPage, activePage } = props;\n    const paginationPages = totalItems > 30 ? (totalItems / 30).toFixed() : null;\n    const paginationItems = [];\n    if (paginationPages) {\n      for (let i = 1; i <= paginationPages; i++) {\n        paginationItems.push(\n          <Pagination.Item\n            key={i}\n            active={activePage === i}\n            onClick={() => { redirectToPage(i); }}\n          >\n            {i}\n          </Pagination.Item>,\n        );\n      }\n    }\n    return paginationItems;\n  };\n  return (\n    <div>\n      <Pagination bsSize=\"medium\">{getPages()}</Pagination>\n    </div>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  redirectToPage: PropTypes.func.isRequired,\n  activePage: PropTypes.number.isRequired,\n};\n\nexport default PaginationComponent;\n","import React from 'react';\nimport { Table, Glyphicon, Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst TableComponent = (props) => {\n  const { searchResult, favorites, addToFavorites } = props;\n  return (\n    Array.isArray(searchResult.payload)\n      ? (\n        <Table striped bordered condensed hover>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Owner</th>\n              <th>Starts</th>\n              <th>Fork link</th>\n              <th>Favorites</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.isArray(searchResult.payload) && searchResult.payload.map(item => (\n              <tr key={item.id}>\n                <td>\n                  {item.name}\n                </td>\n                <td>\n                  {item.owner.login}\n                </td>\n                <td>\n                  {item.stargazers_count}\n                </td>\n                <td>\n                  <a href={item.html_url}>{item.html_url}</a>\n                  <Button\n                    onClick={() => { addToFavorites(item); }}\n                    className=\"table-add-to-favorites\"\n                    bsStyle=\"primary\"\n                    bsSize=\"xsmall\"\n                  >\n              add to favorites\n                  </Button>\n                </td>\n                <td>\n                  {favorites.find(k => k.id === item.id) ? <Glyphicon glyph=\"star\" /> : ''}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )\n      : <p>Nothing found, try to search something else</p>\n  );\n};\n\nTableComponent.propTypes = {\n  searchResult: PropTypes.object.isRequired,\n  favorites: PropTypes.array.isRequired,\n  addToFavorites: PropTypes.func.isRequired,\n};\n\nexport default TableComponent;\n","const parseUrl = (s) => {\n  const splitUrl = s.split('=');\n  return {\n    page: parseInt(splitUrl[1], 10),\n    name: splitUrl[2],\n  };\n};\n\nexport default parseUrl;\n","import React from 'react';\n\nconst Preloader = () => (\n  <div id=\"fountainG\">\n    <div id=\"fountainG_1\" className=\"fountainG\" />\n    <div id=\"fountainG_2\" className=\"fountainG\" />\n    <div id=\"fountainG_3\" className=\"fountainG\" />\n    <div id=\"fountainG_4\" className=\"fountainG\" />\n    <div id=\"fountainG_5\" className=\"fountainG\" />\n    <div id=\"fountainG_6\" className=\"fountainG\" />\n    <div id=\"fountainG_7\" className=\"fountainG\" />\n    <div id=\"fountainG_8\" className=\"fountainG\" />\n  </div>\n);\n\nexport default Preloader;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Grid } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { initSearch } from '../../redux/actions';\nimport SearchComponent from '../../components/Search/Search';\nimport PaginationComponent from '../../components/Pagination/Pagination';\nimport TableComponent from '../../components/Table/Table';\nimport parseUrl from '../../utils';\nimport Preloader from '../../components/Preloader/Preloader';\n\nclass SearchResultPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputText: '',\n    };\n  }\n\n  componentWillMount() {\n    const { location, searchRepo, searchResult } = this.props;\n    if (Object.keys(searchResult).length === 0 && searchResult.constructor === Object && searchResult.status !== 'loading') {\n      const data = parseUrl(location.search);\n      searchRepo.initSearch({ name: data.name, page: data.page });\n    }\n  }\n\n  inputHandler = (e) => {\n    this.setState({ searchInputText: e.target.value });\n  }\n\n  redirectToResult = (p) => {\n    const { history } = this.props;\n    history.push(`/result?page=1repository=${p}`);\n  }\n\n  redirectToPage = (p) => {\n    const { history, searchRepo, location } = this.props;\n    const { searchInputText } = this.state;\n    const repoName = searchInputText || parseUrl(location.search).name;\n    searchRepo.initSearch({ name: repoName, page: p });\n    history.push(`/result?page=${p}repository=${repoName}`);\n  }\n\n  addToFavorites = (i) => {\n    const favorites = window.localStorage.getItem('favorites');\n\n    if (!favorites) {\n      const arr = [];\n      arr.push(i);\n      window.localStorage.setItem('favorites', JSON.stringify(arr));\n    }\n    const arr = JSON.parse(window.localStorage.getItem('favorites'));\n    const isExists = arr.find(item => (item.id === i.id));\n    if (!isExists) {\n      arr.push(i);\n      window.localStorage.setItem('favorites', JSON.stringify(arr));\n    }\n  }\n\n  render() {\n    const { searchResult, searchRepo, location } = this.props;\n    const { searchInputText } = this.state;\n    const activePage = parseUrl(location.search).page;\n    const favorites = JSON.parse(window.localStorage.getItem('favorites'));\n    return (\n      <Grid>\n        <SearchComponent\n          redirect={this.redirectToResult}\n          searchRepo={searchRepo.initSearch}\n          inputHandler={this.inputHandler}\n          inputValue={searchInputText}\n        />\n        {searchResult.payload\n          ? (\n            <div>\n              <TableComponent\n                searchResult={searchResult}\n                addToFavorites={this.addToFavorites}\n                favorites={favorites}\n              />\n              <PaginationComponent\n                redirectToPage={this.redirectToPage}\n                totalItems={searchResult.totalItems}\n                activePage={activePage}\n              />\n            </div>\n          )\n          : <Preloader />}\n      </Grid>\n    );\n  }\n}\n\nSearchResultPage.propTypes = {\n  location: PropTypes.object.isRequired,\n  searchRepo: PropTypes.object.isRequired,\n  searchResult: PropTypes.object.isRequired,\n  history: PropTypes.object,\n};\n\nconst bindActions = dispatch => ({\n  dispatch,\n  searchRepo: bindActionCreators({ initSearch }, dispatch),\n});\n\nconst mapStateToProps = state => ({\n  searchResult: state.appState.searchResult,\n});\n\nexport default connect(mapStateToProps, bindActions)(SearchResultPage);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport SearchPage from './containers/SearchPage/SearchPage';\nimport SearchResultPage from './containers/SearchResultPage/SearchResultPage';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={SearchPage} />\n          <Route path=\"/result\" component={SearchResultPage} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { actionTypes } from './actions';\n\nconst initialState = {\n  searchResult: {},\n  totalItems: null,\n  activePage: null,\n};\n\nconst appState = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_GIT_REPO:\n      return { ...state, searchResult: { status: 'loading', payload: null } };\n    case actionTypes.FETCH_GIT_REPO_SUCCSESS:\n      return { ...state, searchResult: { ...state.searchResult, status: 'success', payload: action.payload } };\n    case actionTypes.FETCH_GIT_REPO_FAIL:\n      return { ...state, searchResult: { status: 'error', payload: null } };\n    case actionTypes.FETCH_FORK_COUNT_SUCCESS:\n      return {\n        ...state,\n        searchResult: { ...state.searchResult, totalItems: action.payload.forks_count },\n      };\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  appState,\n});\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}